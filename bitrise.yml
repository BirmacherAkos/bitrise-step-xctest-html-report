format_version: 7
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - BITRISE_STEP_ID: xctest-html-report
  - BITRISE_STEP_VERSION: "0.1.3"
  - BITRISE_STEP_GIT_CLONE_URL: https://github.com/BirmacherAkos/bitrise-step-xctest-html-report.git

  - SAMPLE_APP_URL: https://github.com/BirmacherAkos/bitrise-samples_apps_ios_xcode-10_default.git
  - ORIGIN_SOURCE_DIR: $BITRISE_SOURCE_DIR

  - MULTIPLE_TEST_RESULT: "false"

workflows:
  ci_xcode_10:
    description:
      "Changing the install branch to master"
    envs:
    - INSTALL_BRANCH: "master"
    after_run:
    - ci

  ci_xcode_11:
    description:
      "Changing the install branch to develop"
    envs:
    - INSTALL_BRANCH: "develop"
    after_run:
    - ci

  ci:
    before_run:
    - audit-this-step
    steps:
    - go-list:
    - golint:
    - errcheck:
    - go-test:
    - codecov:
        run_if: .IsCI
        inputs:
        - other_options: -f ${GO_CODE_COVERAGE_REPORT_PATH}
        - CODECOV_TOKEN: "$CODECOV_TOKEN"
    - script:
        run_if: ".IsCI"
        title: Install Xcpretty
        inputs:
        - content: |
            #!/bin/bash
            gem install xcpretty
    after_run:
    - generate_test
    - test_one_test_result_with_junit
    - test_one_test_result_without_junit
    - test_one_test_result_with_junit_verbose
    - test_one_test_result_without_junit_verbose
    - test_multiple_test_result_with_junit
    - test_multiple_test_result_without_junit
    - test_multiple_test_result_with_junit_verbose
    - test_multiple_test_result_without_junit_verbose

  # 
  # One test result 

  test_one_test_result_with_junit:
    envs:
    - MULTIPLE_TEST_RESULT: "false"
    - TEST_RESULT_PATH: ./Test.xcresult
    - GENERATE_JUNIT: "yes"
    - VERBOSE: "yes"
    after_run:
    - common
    - run_test

  test_one_test_result_without_junit:
    envs:
    - MULTIPLE_TEST_RESULT: "false"
    - TEST_RESULT_PATH: ./Test.xcresult
    - GENERATE_JUNIT: "no"
    - VERBOSE: "no"
    after_run:
    - common
    - run_test

  # 
  # One test result with verbose log enabled

  test_one_test_result_with_junit_verbose:
    envs:
    - MULTIPLE_TEST_RESULT: "false"
    - TEST_RESULT_PATH: ./Test.xcresult
    - GENERATE_JUNIT: "yes"
    - VERBOSE: "yes"
    after_run:
    - common
    - run_test

  test_one_test_result_without_junit_verbose:
    envs:
    - MULTIPLE_TEST_RESULT: "false"
    - TEST_RESULT_PATH: ./Test.xcresult
    - GENERATE_JUNIT: "no"
    - VERBOSE: "yes"
    after_run:
    - common
    - run_test
  
  # 
  # Multiple test result

  test_multiple_test_result_with_junit:
    envs:
    - MULTIPLE_TEST_RESULT: "true"
    - TEST_RESULT_PATH: |
        ./Test.xcresult
        ./Test_2.xcresult
        ./Test_3.xcresult
    - GENERATE_JUNIT: "yes"
    - VERBOSE: "no"
    after_run:
    - common
    - run_test

  test_multiple_test_result_without_junit:
    envs:
    - MULTIPLE_TEST_RESULT: "true"
    - TEST_RESULT_PATH: |
        ./Test.xcresult
        ./Test_2.xcresult
        ./Test_3.xcresult
    - GENERATE_JUNIT: "no"
    - VERBOSE: "no"
    after_run:
    - common
    - run_test

  # 
  # Multiple test result with verbose log enabled

  test_multiple_test_result_with_junit_verbose:
    envs:
    - MULTIPLE_TEST_RESULT: "true"
    - TEST_RESULT_PATH: |
        ./Test.xcresult
        ./Test_2.xcresult
        ./Test_3.xcresult
    - GENERATE_JUNIT: "yes"
    - VERBOSE: "yes"
    after_run:
    - common
    - run_test

  test_multiple_test_result_without_junit_verbose:
    envs:
    - MULTIPLE_TEST_RESULT: "true"
    - TEST_RESULT_PATH: |
        ./Test.xcresult
        ./Test_2.xcresult
        ./Test_3.xcresult
    - GENERATE_JUNIT: "no"
    - VERBOSE: "yes"
    after_run:
    - common
    - run_test

  run_test:
    steps:
    - path::./:
        title: Test one test result
        run_if: true
        inputs:
        - test_result_path: $TEST_RESULT_PATH
        - generate_junit: $GENERATE_JUNIT
        - verbose: $VERBOSE
        - install_branch: $INSTALL_BRANCH

  generate_test:
    envs:
    - BITRISE_PROJECT_PATH: Xcode-10_default.xcodeproj
    - BITRISE_SCHEME: Xcode-10_default
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            cd ${ORIGIN_SOURCE_DIR}
            rm -rf "./_tmp"
            mkdir "_tmp"
    - change-workdir:
        title: Switch working dir to test / _tmp dir
        description: |-
          To prevent step testing issues, like referencing relative
          files with just './some-file' in the step's code, which would
          work for testing the step from this directory directly
          but would break if the step is included in another `bitrise.yml`.
        run_if: true
        inputs:
        - path: ./_tmp
        - is_create_path: true
    - script:
        title: Git clone sample app
        inputs:
        - content: |
            #!/bin/bash
            git clone $SAMPLE_APP_URL .
    - xcode-test: {}

  common:
    steps:
    - change-workdir:
        title: Switch working dir to test / _tmp dir
        description: |-
          To prevent step testing issues, like referencing relative
          files with just './some-file' in the step's code, which would
          work for testing the step from this directory directly
          but would break if the step is included in another `bitrise.yml`.
        run_if: true
        inputs:
        - path: ./_tmp
        - is_create_path: true  
    - script:
        run_if: '{{getenv "MULTIPLE_TEST_RESULT" | eq "false"}}'
        title: Copy Test.xcresult
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            cp -R $BITRISE_XCRESULT_PATH ./Test.xcresult
    - script:
        run_if: '{{getenv "MULTIPLE_TEST_RESULT" | eq "true"}}'
        title: Copy & multiply Test.xcresult
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            cp -R $BITRISE_XCRESULT_PATH ./Test.xcresult
            cp -R $BITRISE_XCRESULT_PATH ./Test_2.xcresult
            cp -R $BITRISE_XCRESULT_PATH ./Test_3.xcresult


  # ----------------------------------------------------------------	
  # --- workflow to Release a new version	
  create-release:	
    steps:	
    - script:	
        title:	
        inputs:	
        - content: |	
            #!/bin/bash	
            set -e	
            export CI=true	
            releaseman create --version $BITRISE_STEP_VERSION


  # ----------------------------------------------------------------
  # --- workflows to Share this step into a Step Library
  audit-this-step:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            stepman audit --step-yml ./step.yml

  share-this-step:
    envs:
      # if you want to share this step into a StepLib
      - MY_STEPLIB_REPO_FORK_GIT_URL: $MY_STEPLIB_REPO_FORK_GIT_URL
      - BITRISE_STEP_ID: $BITRISE_STEP_ID
      - BITRISE_STEP_VERSION: $BITRISE_STEP_VERSION
      - BITRISE_STEP_GIT_CLONE_URL: $BITRISE_STEP_GIT_CLONE_URL
    description: |-
      If this is the first time you try to share a Step you should
      first call: $ bitrise share

      This will print you a guide, and information about how Step sharing
      works. Please read it at least once!

      As noted in the Step sharing guide you'll have to fork the
      StepLib you want to share this step into. Once you're done with forking
      the repository you should set your own fork's git clone URL
      in the `.bitrise.secrets.yml` file, or here in the `envs` section,
      as the value of the `MY_STEPLIB_REPO_FORK_GIT_URL` environment.

      You're now ready to share this Step, just make sure that
      the `BITRISE_STEP_ID` and `BITRISE_STEP_VERSION`
      environments are set to the desired values!

      To share this Step into a StepLib you can just run: $ bitrise run share-this-step

      Once it finishes the only thing left is to actually create a Pull Request,
      the way described in the guide printed at the end of the process.
    before_run:
    - audit-this-step
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            
            bitrise share start -c "${MY_STEPLIB_REPO_FORK_GIT_URL}"

            bitrise share create \
                --stepid "${BITRISE_STEP_ID}" \
                --tag "${BITRISE_STEP_VERSION}" \
                --git "${BITRISE_STEP_GIT_CLONE_URL}"
            
            bitrise share finish
